#!/usr/bin/env ruby

PG_USER = "user"
PG_PASS = "password"
PG_DBNM = "database"

require 'pg'
require 'erb'
require 'ostruct'

class ErbalT < OpenStruct
  def self.render_from_hash(t, h)
    ErbalT.new(h).render(t)
  end

  def render(template)
    ERB.new(template).result(binding)
  end
end

domain_config_template = File.read('/etc/update-vhosts/client_vhost.conf.erb')
autocn_config_template = File.read('/etc/update-vhosts/client_autoconfig.conf.erb')
secure_config_template = File.read('/etc/update-vhosts/client_ssl.conf.erb')
  
# Output a table of current connections to the DB
conn = PG.connect(  :host => "localhost", :dbname => PG_DBNM, :user => PG_USER, :password => PG_PASS )

conn.exec( "SELECT clients.name, web.domain, web.relative_path FROM public.clients, public.web WHERE web.idk = clients.id;" ) do |result|

  result.each do |row|
    user_path = "/home/"+row["name"]
  	vars = { 
  		:relative_path  => user_path + "/web/" + row["relative_path"],
      :user_path => user_path,
  		:server_name =>  row["domain"] }
  	
    if(row["ssl"] == 1)
      site = "ssl_" + row["domain"]
      File.open("/etc/apache2/sites-available/" + site  + ".conf", 'w') { |f| f.write(ErbalT::render_from_hash(secure_config_template, vars)) }
      if(row["status"] == 1)
        %x( "a2ensite #{site}" )
      else
        %x( "a2dissite #{site}" )
      end

      puts "Enable #{site} with SSL"
    else
      site = row["domain"]
      File.open("/etc/apache2/sites-available/" + site  + ".conf", 'w') { |f| f.write(ErbalT::render_from_hash(domain_config_template, vars)) }
      if(row["status"] == 1)
        %x( "a2ensite #{site}" )
      else
        %x( "a2dissite #{site}" )
      end
        
      puts "Enable #{site}"
    end

    File.open("/etc/apache2/sites-available/autoconfig." + row["domain"] + ".conf", 'w') { |f| f.write(ErbalT::render_from_hash(autocn_config_template, vars)) }
  end
end
